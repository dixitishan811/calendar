feat: refactor ScheduleScreen to use ScheduleState for dynamic loading and state management

This commit refactors the `ScheduleScreen` to use a new `ScheduleState` class for managing the schedule data and loading more data dynamically as the user scrolls. It also improves the handling of month changes in the TopAppBar. Key changes include:

-   Introducing `ScheduleState` to manage schedule items, pagination, and the initial scroll position.
-   Using `monthRange` in `ScheduleState` to track the loaded month range.
-   Creating `loadMoreBackward` and `loadMoreForward` methods in `ScheduleState` to load more items when the user scrolls near the top or bottom.
-   Using `initialScrollIndex` to determine the initial scroll position in `LazyColumn`.
-   Updating the `TopAppBar` with the currently visible month using a `snapshotFlow` that observes the first visible month header in the `LazyColumn`.
-   Removing unnecessary `coroutineScope` and simplifying logic in `ScheduleScreen`.
- Using constant `THRESHOLD` in `ScheduleState` to control the buffer for loading more content.
-   Removing unused date-related methods in YearMonth class.
